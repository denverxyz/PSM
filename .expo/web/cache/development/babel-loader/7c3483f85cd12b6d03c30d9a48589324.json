{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axios from \"axios\";\nimport { READ_COURSES_SUCCESS, READ_COURSES_FAIL, LOADING_COURSES } from \"../../actions\";\nimport { COURSE_SEARCH } from \"../../../config/Config\";\nimport { isEmpty } from \"../../../utils/index\";\nexport var getCourses = function getCourses(title) {\n  return function _callee(dispatch) {\n    var config;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            dispatch({\n              type: LOADING_COURSES\n            });\n            config = {\n              headers: {\n                \"Content-Type\": \"application/json\"\n              }\n            };\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(axios.get(COURSE_SEARCH(!isEmpty(title) ? title : ''), null, config).then(function (response) {\n              dispatch({\n                type: READ_COURSES_SUCCESS,\n                payload: response.data\n              });\n            }).catch(function (error) {\n              console.log(error);\n\n              if (error.response) {\n                console.log(error.response.data.message);\n                console.log(error.response.status);\n                console.log(error.response.headers);\n              } else if (error.request) {\n                console.log(error.request);\n              } else {\n                console.log('Error', error.message);\n              }\n\n              dispatch({\n                type: READ_COURSES_FAIL,\n                payload: error.response.data.message\n              });\n            }));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/Administrator/psm/screens/main_screens/actions/homeActions.js"],"names":["axios","READ_COURSES_SUCCESS","READ_COURSES_FAIL","LOADING_COURSES","COURSE_SEARCH","isEmpty","getCourses","title","dispatch","type","config","headers","get","then","response","payload","data","catch","error","console","log","message","status","request"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACIC,oBADJ,EAEIC,iBAFJ,EAGIC,eAHJ;AAKA,SAASC,aAAT;AACA,SAAQC,OAAR;AAGA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,KAAD;AAAA,SAAW,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAEjCA,YAAAA,QAAQ,CAAC;AAACC,cAAAA,IAAI,EAAEN;AAAP,aAAD,CAAR;AACMO,YAAAA,MAH2B,GAGlB;AACXC,cAAAA,OAAO,EAAE;AACL,gCAAgB;AADX;AADE,aAHkB;AAAA;AAAA,6CAU3BX,KAAK,CAACY,GAAN,CAAUR,aAAa,CAAC,CAACC,OAAO,CAACE,KAAD,CAAR,GAAiBA,KAAjB,GAAuB,EAAxB,CAAvB,EAAmD,IAAnD,EAAwDG,MAAxD,EAAgEG,IAAhE,CAAqE,UAAAC,QAAQ,EAAG;AAGlFN,cAAAA,QAAQ,CAAC;AAEPC,gBAAAA,IAAI,EAAER,oBAFC;AAGPc,gBAAAA,OAAO,EAAED,QAAQ,CAACE;AAHX,eAAD,CAAR;AASH,aAZK,EAYHC,KAZG,CAYG,UAAAC,KAAK,EAAE;AAEZC,cAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;;AACA,kBAAIA,KAAK,CAACJ,QAAV,EAAoB;AAEhBK,gBAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACJ,QAAN,CAAeE,IAAf,CAAoBK,OAAhC;AACAF,gBAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACJ,QAAN,CAAeQ,MAA3B;AACAH,gBAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACJ,QAAN,CAAeH,OAA3B;AACH,eALD,MAKO,IAAIO,KAAK,CAACK,OAAV,EAAmB;AAEtBJ,gBAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACK,OAAlB;AACH,eAHM,MAGA;AAEHJ,gBAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAAK,CAACG,OAA3B;AACH;;AAEDb,cAAAA,QAAQ,CAAC;AAELC,gBAAAA,IAAI,EAAEP,iBAFD;AAGLa,gBAAAA,OAAO,EAAEG,KAAK,CAACJ,QAAN,CAAeE,IAAf,CAAoBK;AAHxB,eAAD,CAAR;AAMH,aAlCK,CAV2B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAX;AAAA,CAAnB","sourcesContent":["import axios from \"axios\";\r\nimport {\r\n    READ_COURSES_SUCCESS,\r\n    READ_COURSES_FAIL,\r\n    LOADING_COURSES\r\n  } from \"../../actions\";\r\nimport { COURSE_SEARCH} from \"../../../config/Config\";\r\nimport {isEmpty} from \"../../../utils/index\"\r\n\r\n\r\nexport const getCourses = (title) => async dispatch => {\r\n\r\n    dispatch({type: LOADING_COURSES})\r\n    const config = {\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        }\r\n      };\r\n\r\n\r\n    await axios.get(COURSE_SEARCH(!isEmpty(title)? title:''),null,config).then(response =>{\r\n\r\n\r\n        dispatch({\r\n    \r\n          type: READ_COURSES_SUCCESS,\r\n          payload: response.data\r\n    \r\n        });\r\n\r\n    \r\n    \r\n    }).catch(error=>{\r\n\r\n        console.log(error)\r\n        if (error.response) {\r\n            // Request made and server responded\r\n            console.log(error.response.data.message);\r\n            console.log(error.response.status);\r\n            console.log(error.response.headers);\r\n        } else if (error.request) {\r\n            // The request was made but no response was received\r\n            console.log(error.request);\r\n        } else {\r\n            // Something happened in setting up the request that triggered an Error\r\n            console.log('Error', error.message);\r\n        }\r\n\r\n        dispatch({\r\n\r\n            type: READ_COURSES_FAIL,\r\n            payload: error.response.data.message\r\n\r\n        });\r\n    });\r\n    \r\n};"]},"metadata":{},"sourceType":"module"}