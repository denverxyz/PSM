{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axios from \"axios\";\nimport { ENROLL_SUCCESS, ENROLL_FAIL, RESET_ENROLL } from \"../../actions\";\nimport { ENROLL } from \"../../../config/Config\";\nimport { setAuthToken, isEmpty } from \"../../../utils/index\";\nimport { AsyncStorage } from \"react-native-web/dist/index\";\nimport { getMyCourses } from \"../actions/courseActions\";\nexport var enrollCourse = function enrollCourse(course_id) {\n  return function _callee(dispatch) {\n    var config, body;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('uselfToken', function (error, value) {\n              if (error) {\n                console.log(error);\n              } else {\n                if (isEmpty(value)) {\n                  console.log(\"no token\");\n                } else {\n                  setAuthToken(value);\n                }\n              }\n            }));\n\n          case 2:\n            config = {\n              headers: {\n                \"Content-Type\": \"application/json\"\n              }\n            };\n            body = JSON.stringify({\n              course_id: course_id\n            });\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(axios.post(ENROLL, body, config).then(function (response) {\n              dispatch({\n                type: ENROLL_SUCCESS\n              });\n              dispatch(getMyCourses());\n            }).catch(function (error) {\n              if (error.response) {\n                console.log(error.response.data.message);\n                console.log(error.response.status);\n                console.log(error.response.headers);\n              } else if (error.request) {\n                console.log(error.request);\n              } else {\n                console.log('Error', error.message);\n              }\n\n              dispatch({\n                type: ENROLL_FAIL,\n                payload: error.response.data.message\n              });\n            }));\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  };\n};\nexport var enrollReset = function enrollReset() {\n  return function _callee2(dispatch) {\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            dispatch({\n              type: RESET_ENROLL\n            });\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/Administrator/psm/screens/main_screens/actions/paymentActions.js"],"names":["axios","ENROLL_SUCCESS","ENROLL_FAIL","RESET_ENROLL","ENROLL","setAuthToken","isEmpty","AsyncStorage","getMyCourses","enrollCourse","course_id","dispatch","getItem","error","value","console","log","config","headers","body","JSON","stringify","post","then","response","type","catch","data","message","status","request","payload","enrollReset"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACIC,cADJ,EAEIC,WAFJ,EAEgBC,YAFhB;AAIA,SAASC,MAAT;AACA,SAASC,YAAT,EAAuBC,OAAvB;SACSC,Y;AACT,SAAQC,YAAR;AAGA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,SAAD;AAAA,SAAe,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEjCJ,YAAY,CAACK,OAAb,CAAqB,YAArB,EAAmC,UAACC,KAAD,EAAOC,KAAP,EAAiB;AACxD,kBAAID,KAAJ,EAAW;AAETE,gBAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AAED,eAJD,MAIK;AAEH,oBAAIP,OAAO,CAACQ,KAAD,CAAX,EAAmB;AACjBC,kBAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACD,iBAFD,MAEK;AACHX,kBAAAA,YAAY,CAACS,KAAD,CAAZ;AAGD;AAEF;AAEF,aAjBK,CAFiC;;AAAA;AAqBjCG,YAAAA,MArBiC,GAqBxB;AACXC,cAAAA,OAAO,EAAE;AACL,gCAAgB;AADX;AADE,aArBwB;AA2B/BC,YAAAA,IA3B+B,GA2BxBC,IAAI,CAACC,SAAL,CAAe;AAC1BX,cAAAA,SAAS,EAAGA;AADc,aAAf,CA3BwB;AAAA;AAAA,6CAgCjCV,KAAK,CAACsB,IAAN,CAAWlB,MAAX,EAAkBe,IAAlB,EAAuBF,MAAvB,EAA+BM,IAA/B,CAAoC,UAAAC,QAAQ,EAAG;AAEnDb,cAAAA,QAAQ,CAAC;AACPc,gBAAAA,IAAI,EAAExB;AADC,eAAD,CAAR;AAIAU,cAAAA,QAAQ,CAACH,YAAY,EAAb,CAAR;AAED,aARK,EAQHkB,KARG,CAQG,UAAAb,KAAK,EAAE;AAEd,kBAAIA,KAAK,CAACW,QAAV,EAAoB;AAElBT,gBAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACW,QAAN,CAAeG,IAAf,CAAoBC,OAAhC;AACAb,gBAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACW,QAAN,CAAeK,MAA3B;AACAd,gBAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACW,QAAN,CAAeN,OAA3B;AACD,eALD,MAKO,IAAIL,KAAK,CAACiB,OAAV,EAAmB;AAExBf,gBAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACiB,OAAlB;AACD,eAHM,MAGA;AAELf,gBAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBH,KAAK,CAACe,OAA3B;AACD;;AAEDjB,cAAAA,QAAQ,CAAC;AAEPc,gBAAAA,IAAI,EAAEvB,WAFC;AAGP6B,gBAAAA,OAAO,EAAElB,KAAK,CAACW,QAAN,CAAeG,IAAf,CAAoBC;AAHtB,eAAD,CAAR;AAMD,aA7BK,CAhCiC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAf;AAAA,CAArB;AAiEL,OAAO,IAAMI,WAAW,GAAG,SAAdA,WAAc;AAAA,SAAM,kBAAMrB,QAAN;AAAA;AAAA;AAAA;AAAA;AAC/BA,YAAAA,QAAQ,CAAC;AACLc,cAAAA,IAAI,EAAEtB;AADD,aAAD,CAAR;;AAD+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAN;AAAA,CAApB","sourcesContent":["import axios from \"axios\";\r\nimport {\r\n    ENROLL_SUCCESS,\r\n    ENROLL_FAIL,RESET_ENROLL\r\n} from \"../../actions\"\r\nimport { ENROLL } from \"../../../config/Config\";\r\nimport { setAuthToken, isEmpty } from \"../../../utils/index\";\r\nimport { AsyncStorage } from 'react-native';\r\nimport {getMyCourses} from '../actions/courseActions'\r\n\r\n\r\nexport const enrollCourse = (course_id) => async dispatch => {\r\n    //assign token as header\r\n    await AsyncStorage.getItem('uselfToken', (error,value) => {\r\n      if (error) { \r\n  \r\n        console.log(error)\r\n  \r\n      }else{\r\n  \r\n        if (isEmpty(value)){\r\n          console.log(\"no token\");\r\n        }else{\r\n          setAuthToken(value)\r\n          //console.log(value)\r\n  \r\n        }\r\n  \r\n      }\r\n  \r\n    });\r\n\r\n    const config = {\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        }\r\n      };\r\n    \r\n      const body = JSON.stringify({ \r\n        course_id : course_id\r\n      });\r\n\r\n  \r\n    await axios.post(ENROLL,body,config).then(response =>{\r\n\r\n      dispatch({\r\n        type: ENROLL_SUCCESS  \r\n      });\r\n  \r\n      dispatch(getMyCourses())\r\n  \r\n    }).catch(error=>{\r\n  \r\n      if (error.response) {\r\n        // Request made and server responded\r\n        console.log(error.response.data.message);\r\n        console.log(error.response.status);\r\n        console.log(error.response.headers);\r\n      } else if (error.request) {\r\n        // The request was made but no response was received\r\n        console.log(error.request);\r\n      } else {\r\n        // Something happened in setting up the request that triggered an Error\r\n        console.log('Error', error.message);\r\n      }\r\n  \r\n      dispatch({\r\n  \r\n        type: ENROLL_FAIL,\r\n        payload: error.response.data.message\r\n  \r\n      });\r\n    });\r\n    \r\n  };\r\n\r\n  export const enrollReset = () => async dispatch => {\r\n    dispatch({\r\n        type: RESET_ENROLL  \r\n      });\r\n  }\r\n  "]},"metadata":{},"sourceType":"module"}