{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axios from \"axios\";\nimport { WRITE_BADGE_FAIL, WRITE_BADGE_SUCCESS, READ_BADGES_SUCCESS, READ_BADGES_FAIL, LOADING_MYBADGES, RESET_BADGES } from \"../../actions\";\nimport { BADGE } from \"../../../config/Config\";\nimport { systemAuth } from \"../../../utils/middleware/systemAuth\";\nimport { setAuthToken, isEmpty } from \"../../../utils/index\";\nimport { AsyncStorage } from \"react-native-web/dist/index\";\nimport { getMyCourses } from \"../actions/courseActions\";\nexport var writeBadge = function writeBadge(course_id, user_id) {\n  return function _callee(dispatch) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            dispatch({\n              type: LOADING_MYBADGES\n            });\n            systemAuth().then(function (response) {\n              setAuthToken(response.token);\n              var config = {\n                headers: {\n                  \"Content-Type\": \"application/json\"\n                }\n              };\n              var body = JSON.stringify({\n                course_id: course_id,\n                user_id: user_id\n              });\n              axios.post(BADGE, body, config).then(function (response) {\n                dispatch({\n                  type: WRITE_BADGE_SUCCESS\n                });\n                dispatch(getMyCourses());\n              }).catch(function (error) {\n                if (error.response) {\n                  console.log(error.response.data.message);\n                  console.log(error.response.status);\n                  console.log(error.response.headers);\n                } else if (error.request) {\n                  console.log(error.request);\n                } else {\n                  console.log('Error', error.message);\n                }\n\n                dispatch({\n                  type: WRITE_BADGE_FAIL,\n                  payload: error.response.data.message\n                });\n              });\n            }, function (err) {\n              console.log(err);\n            });\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  };\n};\nexport var getBadges = function getBadges() {\n  return function _callee2(dispatch) {\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            dispatch({\n              type: LOADING_MYBADGES\n            });\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('uselfToken', function (error, value) {\n              if (error) {\n                console.log(error);\n              } else {\n                if (isEmpty(value)) {\n                  console.log(\"no token\");\n                } else {\n                  setAuthToken(value);\n                }\n              }\n            }));\n\n          case 3:\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(axios.get(BADGE).then(function (response) {\n              dispatch({\n                type: READ_BADGES_SUCCESS,\n                payload: response.data\n              });\n            }).catch(function (error) {\n              if (error.response) {\n                console.log(error.response.data.message);\n                console.log(error.response.status);\n                console.log(error.response.headers);\n              } else if (error.request) {\n                console.log(error.request);\n              } else {\n                console.log('Error', error.message);\n              }\n\n              dispatch({\n                type: READ_BADGES_FAIL\n              });\n            }));\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    });\n  };\n};\nexport var resetBadges = function resetBadges() {\n  return function _callee3(dispatch) {\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            dispatch({\n              type: RESET_BADGES\n            });\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/Administrator/psm/screens/main_screens/actions/badgeAction.js"],"names":["axios","WRITE_BADGE_FAIL","WRITE_BADGE_SUCCESS","READ_BADGES_SUCCESS","READ_BADGES_FAIL","LOADING_MYBADGES","RESET_BADGES","BADGE","systemAuth","setAuthToken","isEmpty","AsyncStorage","getMyCourses","writeBadge","course_id","user_id","dispatch","type","then","response","token","config","headers","body","JSON","stringify","post","catch","error","console","log","data","message","status","request","payload","err","getBadges","getItem","value","get","resetBadges"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport {\r\n    WRITE_BADGE_FAIL,\r\n    WRITE_BADGE_SUCCESS,\r\n    READ_BADGES_SUCCESS,\r\n    READ_BADGES_FAIL,\r\n    LOADING_MYBADGES,\r\n    RESET_BADGES\r\n} from \"../../actions\";\r\nimport { BADGE } from \"../../../config/Config\";\r\nimport {systemAuth} from '../../../utils/middleware/systemAuth';\r\nimport { setAuthToken, isEmpty } from \"../../../utils/index\";\r\nimport { AsyncStorage } from 'react-native';\r\nimport {getMyCourses} from '../actions/courseActions'\r\n\r\n\r\nexport const writeBadge = (course_id,user_id) => async dispatch => {\r\n\r\n    dispatch({type:LOADING_MYBADGES})\r\n    \r\n    systemAuth().then((response)=>{\r\n\r\n        setAuthToken(response.token)\r\n        const config = {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        };\r\n\r\n        const body = JSON.stringify({ \r\n            course_id : course_id, \r\n            user_id : user_id\r\n        });\r\n\r\n        axios.post(BADGE, body, config).then(response =>{\r\n  \r\n            dispatch({\r\n              type: WRITE_BADGE_SUCCESS,\r\n            });        \r\n        \r\n            dispatch(getMyCourses())\r\n        \r\n        }).catch(error=>{\r\n        \r\n            if (error.response) {\r\n              // Request made and server responded\r\n              console.log(error.response.data.message);\r\n              console.log(error.response.status);\r\n              console.log(error.response.headers);\r\n            } else if (error.request) {\r\n              // The request was made but no response was received\r\n              console.log(error.request);\r\n            } else {\r\n              // Something happened in setting up the request that triggered an Error\r\n              console.log('Error', error.message);\r\n            }\r\n        \r\n            dispatch({\r\n              type: WRITE_BADGE_FAIL,\r\n              payload:error.response.data.message\r\n            });\r\n        \r\n        })\r\n         \r\n\r\n\r\n    }, (err) =>{\r\n        console.log(err)\r\n    })\r\n    \r\n\r\n};\r\n\r\nexport const getBadges = () => async dispatch => {\r\n  dispatch({type:LOADING_MYBADGES});\r\n  //assign token as header\r\n  await AsyncStorage.getItem('uselfToken', (error,value) => {\r\n    if (error) { \r\n\r\n      console.log(error)\r\n\r\n    }else{\r\n\r\n      if (isEmpty(value)){\r\n        console.log(\"no token\");\r\n      }else{\r\n        setAuthToken(value)\r\n        //console.log(value)\r\n\r\n      }\r\n\r\n    }\r\n\r\n  });\r\n\r\n  await axios.get(BADGE).then(response =>{\r\n    dispatch({\r\n\r\n      type: READ_BADGES_SUCCESS,\r\n      payload: response.data\r\n\r\n    });\r\n\r\n\r\n  }).catch(error=>{\r\n\r\n    if (error.response) {\r\n      // Request made and server responded\r\n      console.log(error.response.data.message);\r\n      console.log(error.response.status);\r\n      console.log(error.response.headers);\r\n    } else if (error.request) {\r\n      // The request was made but no response was received\r\n      console.log(error.request);\r\n    } else {\r\n      // Something happened in setting up the request that triggered an Error\r\n      console.log('Error', error.message);\r\n    }\r\n\r\n    dispatch({\r\n      type: READ_BADGES_FAIL\r\n    });\r\n  });\r\n};\r\n  \r\nexport const resetBadges = () => async dispatch => {\r\n  dispatch({type:RESET_BADGES})\r\n}"]},"metadata":{},"sourceType":"module"}