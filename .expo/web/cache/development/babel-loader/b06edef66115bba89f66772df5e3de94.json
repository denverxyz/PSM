{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { WRITE_BADGE_SUCCESS, WRITE_BADGE_FAIL, LOADING_MYBADGES, READ_BADGES_SUCCESS, READ_BADGES_FAIL, RESET_BADGES } from \"../../actions\";\nvar initialState = {\n  loading: false,\n  badges: null,\n  errors: null\n};\nexport default function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var type = action.type,\n      payload = action.payload;\n\n  switch (type) {\n    case WRITE_BADGE_SUCCESS:\n      return _objectSpread({}, state, {\n        loading: false\n      });\n\n    case WRITE_BADGE_FAIL:\n      return _objectSpread({}, state, {\n        loading: false,\n        errors: payload\n      });\n\n    case READ_BADGES_SUCCESS:\n      return _objectSpread({}, state, {\n        loading: false,\n        badges: payload\n      });\n\n    case READ_BADGES_FAIL:\n      return _objectSpread({}, state, {\n        loading: false\n      });\n\n    case LOADING_MYBADGES:\n      return _objectSpread({}, state, {\n        loading: true\n      });\n\n    case RESET_BADGES:\n      return {\n        loading: false,\n        badges: null,\n        errors: null\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["C:/Users/Administrator/psm/screens/main_screens/reducers/badgeReducer.js"],"names":["WRITE_BADGE_SUCCESS","WRITE_BADGE_FAIL","LOADING_MYBADGES","READ_BADGES_SUCCESS","READ_BADGES_FAIL","RESET_BADGES","initialState","loading","badges","errors","state","action","type","payload"],"mappings":";;;;;;AAAA,SACIA,mBADJ,EAEIC,gBAFJ,EAGIC,gBAHJ,EAIIC,mBAJJ,EAKIC,gBALJ,EAMIC,YANJ;AAUE,IAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,KADU;AAEnBC,EAAAA,MAAM,EAAE,IAFW;AAGnBC,EAAAA,MAAM,EAAC;AAHY,CAArB;AAMA,eAAe,YAAuC;AAAA,MAA9BC,KAA8B,uEAAtBJ,YAAsB;AAAA,MAARK,MAAQ;AAAA,MAC5CC,IAD4C,GAC1BD,MAD0B,CAC5CC,IAD4C;AAAA,MACtCC,OADsC,GAC1BF,MAD0B,CACtCE,OADsC;;AAEpD,UAAQD,IAAR;AACI,SAAKZ,mBAAL;AACI,+BACOU,KADP;AAEIH,QAAAA,OAAO,EAAC;AAFZ;;AAIJ,SAAKN,gBAAL;AACI,+BACOS,KADP;AAEIH,QAAAA,OAAO,EAAC,KAFZ;AAGIE,QAAAA,MAAM,EAACI;AAHX;;AAKJ,SAAKV,mBAAL;AACI,+BACOO,KADP;AAEIH,QAAAA,OAAO,EAAC,KAFZ;AAGIC,QAAAA,MAAM,EAACK;AAHX;;AAKJ,SAAKT,gBAAL;AACI,+BACOM,KADP;AAEIH,QAAAA,OAAO,EAAC;AAFZ;;AAIJ,SAAKL,gBAAL;AACI,+BACOQ,KADP;AAEIH,QAAAA,OAAO,EAAC;AAFZ;;AAIJ,SAAKF,YAAL;AACI,aAAM;AACFE,QAAAA,OAAO,EAAE,KADP;AAEFC,QAAAA,MAAM,EAAE,IAFN;AAGFC,QAAAA,MAAM,EAAC;AAHL,OAAN;;AAKJ;AACI,aAAOC,KAAP;AAnCR;AAqCD","sourcesContent":["import {\r\n    WRITE_BADGE_SUCCESS,\r\n    WRITE_BADGE_FAIL,\r\n    LOADING_MYBADGES,\r\n    READ_BADGES_SUCCESS,\r\n    READ_BADGES_FAIL,\r\n    RESET_BADGES\r\n  } from \"../../actions\";\r\n\r\n\r\n  const initialState = {\r\n    loading: false,\r\n    badges: null,\r\n    errors:null\r\n  }\r\n\r\n  export default function(state = initialState, action) {\r\n    const { type, payload } = action;\r\n    switch (type) {\r\n        case WRITE_BADGE_SUCCESS:\r\n            return{\r\n                ...state,\r\n                loading:false\r\n            }\r\n        case WRITE_BADGE_FAIL:\r\n            return{\r\n                ...state,\r\n                loading:false,\r\n                errors:payload\r\n            }\r\n        case READ_BADGES_SUCCESS:\r\n            return{\r\n                ...state,\r\n                loading:false,\r\n                badges:payload\r\n            }\r\n        case READ_BADGES_FAIL:\r\n            return{\r\n                ...state,\r\n                loading:false,\r\n            }\r\n        case LOADING_MYBADGES:\r\n            return{\r\n                ...state,\r\n                loading:true\r\n            }\r\n        case RESET_BADGES:\r\n            return{\r\n                loading: false,\r\n                badges: null,\r\n                errors:null\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n  } "]},"metadata":{},"sourceType":"module"}